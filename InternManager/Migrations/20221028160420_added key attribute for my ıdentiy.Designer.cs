// <auto-generated />
using System;
using InternManager.Entities.Concrate;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InternManager.WebUI.Migrations
{
    [DbContext(typeof(InternContext))]
    [Migration("20221028160420_added key attribute for my ıdentiy")]
    partial class addedkeyattributeformyıdentiy
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InternManager.Entities.Concrate.Boss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsSuper");

                    b.Property<int>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Bosses");
                });

            modelBuilder.Entity("InternManager.Entities.Concrate.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FacultyName");

                    b.Property<int?>("FacultyNumber")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("InternManager.Entities.Concrate.Intern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dönem")
                        .IsRequired();

                    b.Property<DateTime>("RecEnd");

                    b.Property<DateTime>("RecFileEnd");

                    b.Property<DateTime>("RecFileEnd2");

                    b.Property<DateTime>("RecFileStart");

                    b.Property<DateTime>("RecFileStart2");

                    b.Property<DateTime>("RecStart");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Interns");
                });

            modelBuilder.Entity("InternManager.Entities.Concrate.Intern1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("DetailDocument")
                        .IsRequired();

                    b.Property<byte[]>("DetailDocument2")
                        .IsRequired();

                    b.Property<string>("Info")
                        .IsRequired();

                    b.Property<int>("InternId");

                    b.Property<bool>("IsOk");

                    b.Property<bool>("IsOk2");

                    b.Property<string>("Note")
                        .IsRequired();

                    b.Property<string>("OkDays")
                        .IsRequired();

                    b.Property<DateTime>("RecEnd");

                    b.Property<DateTime>("RecFileEnd");

                    b.Property<DateTime>("RecFileStart");

                    b.Property<DateTime>("RecStart");

                    b.Property<int>("Student_Id");

                    b.Property<int>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("InternId");

                    b.HasIndex("Student_Id");

                    b.ToTable("Interns1");
                });

            modelBuilder.Entity("InternManager.Entities.Concrate.Intern2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("DetailDocument")
                        .IsRequired();

                    b.Property<byte[]>("DetailDocument2")
                        .IsRequired();

                    b.Property<string>("Info")
                        .IsRequired();

                    b.Property<int>("InternId");

                    b.Property<bool>("IsOk");

                    b.Property<bool>("IsOk2");

                    b.Property<string>("Note")
                        .IsRequired();

                    b.Property<string>("OkDays")
                        .IsRequired();

                    b.Property<DateTime>("RecEnd");

                    b.Property<DateTime>("RecFileEnd");

                    b.Property<DateTime>("RecFileStart");

                    b.Property<DateTime>("RecStart");

                    b.Property<int>("Student_Id");

                    b.Property<int>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("InternId");

                    b.HasIndex("Student_Id");

                    b.ToTable("Interns2");
                });

            modelBuilder.Entity("InternManager.Entities.Concrate.ISE", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("DetailDocument")
                        .IsRequired();

                    b.Property<byte[]>("DetailDocument2")
                        .IsRequired();

                    b.Property<string>("Info")
                        .IsRequired();

                    b.Property<int>("InternId");

                    b.Property<bool>("IsOk");

                    b.Property<bool>("IsOk2");

                    b.Property<string>("Note")
                        .IsRequired();

                    b.Property<string>("OkDays")
                        .IsRequired();

                    b.Property<DateTime>("RecEnd");

                    b.Property<DateTime>("RecFileEnd");

                    b.Property<DateTime>("RecFileStart");

                    b.Property<DateTime>("RecStart");

                    b.Property<int>("Student_Id");

                    b.Property<int>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("InternId");

                    b.HasIndex("Student_Id");

                    b.ToTable("Ises");
                });

            modelBuilder.Entity("InternManager.Entities.Concrate.Komisyon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsSuper");

                    b.Property<int>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Komisyons");
                });

            modelBuilder.Entity("InternManager.Entities.Concrate.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Civilization")
                        .IsRequired();

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("IdentyNumber")
                        .IsRequired();

                    b.Property<byte[]>("Image");

                    b.Property<string>("NameSurname")
                        .IsRequired();

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("InternManager.Entities.Concrate.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacultyId");

                    b.Property<bool>("IsFirstPassword");

                    b.Property<int>("PersonId");

                    b.Property<string>("StudentMail")
                        .IsRequired();

                    b.Property<string>("StudentNumber")
                        .IsRequired();

                    b.Property<string>("StudentPassword")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("PersonId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("InternManager.Entities.Concrate.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacultyNumber");

                    b.Property<bool>("IsFirstPassword");

                    b.Property<int>("PersonId");

                    b.Property<string>("TeacherMail")
                        .IsRequired();

                    b.Property<string>("TeacherNumber")
                        .IsRequired();

                    b.Property<string>("TeacherPassword")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FacultyNumber");

                    b.HasIndex("PersonId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("InternManager.Entities.Concrate.Boss", b =>
                {
                    b.HasOne("InternManager.Entities.Concrate.Teacher", "TeacherPk")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternManager.Entities.Concrate.Intern1", b =>
                {
                    b.HasOne("InternManager.Entities.Concrate.Intern", "InternPk")
                        .WithMany()
                        .HasForeignKey("InternId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternManager.Entities.Concrate.Student", "StudentPk")
                        .WithMany()
                        .HasForeignKey("Student_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternManager.Entities.Concrate.Intern2", b =>
                {
                    b.HasOne("InternManager.Entities.Concrate.Intern", "InternPk")
                        .WithMany()
                        .HasForeignKey("InternId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternManager.Entities.Concrate.Student", "StudentPk")
                        .WithMany()
                        .HasForeignKey("Student_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternManager.Entities.Concrate.ISE", b =>
                {
                    b.HasOne("InternManager.Entities.Concrate.Intern", "InternPk")
                        .WithMany()
                        .HasForeignKey("InternId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternManager.Entities.Concrate.Student", "StudentPk")
                        .WithMany()
                        .HasForeignKey("Student_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternManager.Entities.Concrate.Komisyon", b =>
                {
                    b.HasOne("InternManager.Entities.Concrate.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternManager.Entities.Concrate.Student", b =>
                {
                    b.HasOne("InternManager.Entities.Concrate.Faculty", "FacultyPk")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternManager.Entities.Concrate.Person", "PersonPk")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternManager.Entities.Concrate.Teacher", b =>
                {
                    b.HasOne("InternManager.Entities.Concrate.Faculty", "FacultyPk")
                        .WithMany()
                        .HasForeignKey("FacultyNumber")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternManager.Entities.Concrate.Person", "PersonPk")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
